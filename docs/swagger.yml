openapi: 3.0.1
info:
  title: vue-admin-front API
  description: Backend agnostic API specification used to interact administrative interface frontend SPA
  version: 0.1.1
servers:
  - url: /api/admin
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
  responses:
    401:
      description: Authorization required
    403:
      description: Authorized user is not allowed to perform this action
    404:
      description: Requested resource not found
    413:
      description: Request payload is too large
    422:
      description: Input data validation error
      content:
        application/json:
          schema:
            type: object
            description: validation errors
            properties:
              errors:
                type: object
                description: errors per each field
                additionalProperties:
                  type: array
                  description: array of error descriptions
                  items:
                    type: string
                    description: error description
            example:
              errors:
                email:
                  - Email has wrong format
                age:
                  - Age must be at least 18
                  - Age must be less than 100
    429:
      description: Too many requests, try again later
      headers:
        Retry-After:
          schema:
            type: integer
          description: Retry timeout in seconds
  requestBodies:
    entityItemData:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityItem'
        multipart/form-data:
          schema:
            description: |
              Use multipart/form-data body only if you are going to upload files.
              Each upload file field name must be prepended with `file__` special prefix.
              For example, if you upload file to the `image_id` field you should name binary data field as `file__image_id`.
              File name or ID must be returned (without `file__` prefix) after successful response processing.
            properties:
              __json_data:
                type: string
                format: json
                description: JSON encoded non-file item field values, same format as the `application/json` request body
                example: '{"name": "Post name", "content": "<p>Post content</p>"}'
            additionalProperties:
              oneOf:
                - type: string
                  format: binary
                  description: file__{field}
                - type: array
                  description: files array, field name must be appended with [] (file__{field}[])
                  items:
                    type: string
                    format: binary
  parameters:
    entity:
      in: path
      name: entity
      required: true
      schema:
        type: string
      description: entity name
    id:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: entity item id
    page:
      in: query
      name: page
      schema:
        type: integer
        default: 1
        minimum: 1
      description: page number
    limit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      description: items count per page
    filters:
      in: query
      name: filters
      schema:
        type: object
        additionalProperties: true
      description: |
        Apply query filters from request query string. API backend must support these actions:
        * filters[field]=value - field equals to value
        * filters[!field]=value - field not equals to value
        * filters[>~field]=value - field is more than or equals to value
        * filters[<~field]=value - field is less than or equals to value
        * filters[>field]=value - field is more than value
        * filters[<field]=value - field is less than value
        * filters[field][]=value1&filters[field][]=value2... - field equals to one of provided values (WHERE IN)
        * filters[!field][]=value1&filters[!field][]=value2... - field not equals to any of provided values (WHERE NOT IN)
        * filters[field] - field value is not null (IS NOT NULL)
        * filters[!field] - field value is null (IS NULL)
    scopes:
      in: query
      name: scopes
      schema:
        type: object
        additionalProperties: true
      description: |
        Apply complex filters with custom logic (known as 'scopes' in Laravel) from request query string.
        The main idea is to provide some custom filtering/ordering/etc. logic for entities.
        Syntax:
        * scopes[scopeName] - scope without parameters
        * scopes[scopeName][]=param1&scopes[scopeName][]=param2 - pass scope parameters
    search:
      in: query
      name: search
      schema:
        type: string
      description: text search
    sort:
      in: query
      name: sort
      schema:
        type: object
        additionalProperties: true
      description: |
        Apply simple sorting based on request query string. Syntax:
        * sort[field] - order by asc
        * sort[field]=asc|desc
  schemas:
    User:
      type: object
      description: Authorized user object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
      additionalProperties: true
      required: [id]
      example:
        id: 1
        email: example@mail.com
        name: Darth Vader
    MainNavItem:
      oneOf:
        - type: object
          description: Main navigation link or group item
          properties:
            title:
              type: string
              description: link title (can be omitted if entity is provided and entity has a title)
            icon:
              type: string
              description:
                any valid [Font Awesome 5 icon name](http://fontawesome.io/icons/)
              example: 'fas fa-user'
            entity:
              type: string
              description: entity name (this item will be a link to an entity home page)
            path:
              type: string
              description: custom URL or relative path (use this for external or unmanaged custom links)
            route:
              type: string
              description: route within administrative interface (use this for SPA managed links)
            items:
              type: array
              description: inner items (this item will be expandable group if provided)
              items:
                $ref: '#/components/schemas/MainNavItem'
          additionalProperties: true
        - type: string
          description: Main navigation header item
    FieldDescription:
      type: object
      description: Entity field description
      properties:
        name:
          type: string
          description: field name
        type:
          type: string
          description: field type
          default: text
        title:
          type: string
          description: human readable field title
        disabled:
          type: boolean
          description: disable editing (for editable fields)
      additionalProperties:
        description: anything else depending on a field type
      required: [name]
    EntityDescription:
      type: object
      description: Entity meta information
      properties:
        title:
          type: string
          description: entity name
          example: 'Posts'
        primary:
          type: string
          description: entity primary key name
          default: 'id'
          example: 'key'
        create_title:
          type: string
          description: new item form title
          default: 'New element'
          example: 'Create new post'
        item_title:
          type: string
          description: item edit form title (placeholders can be used)
          default: '{{ title }} [{{ primary key }}]'
          example: 'How to make a bomb [123]'
        permissions:
          type: object
          description: allowed actions
          properties:
            index:
              type: boolean
              description: see item list
            create:
              type: boolean
              description: create new item
            item:
              type: boolean
              description: see item details
            update:
              type: boolean
              description: update item
            destroy:
              type: boolean
              description: destroy item
        index_fields:
          type: array
          description: fields for entity index
          items:
            allOf:
              - $ref: '#/components/schemas/FieldDescription'
              - properties:
                  editable:
                    type: boolean
                    description: allow inline editing (`display` component will be replaced with `field`)
                  sortable:
                    type: boolean
                    description: allow sort by this field (enables sorting button on table column header)
                  sortableAs:
                    type: string
                    description: sortable using a field other than a field name
        item_fields:
          type: array
          description: editing/creating fields
          items:
            allOf:
              - $ref: '#/components/schemas/FieldDescription'
              - properties:
                  default:
                    description: default value (can be `'now'` for date/datetime fields)
        filter_fields:
          type: array
          description: index filter fields
          items:
            $ref: '#/components/schemas/FieldDescription'
    MetaData:
      type: object
      description: Meta data containing information about available entities, actions, navigation links, etc.
      properties:
        skin:
          type: string
          description: AdminLTE built-in or custom skin name
          default: 'blue'
          example: 'red'
        nav:
          type: array
          description: main navigation menu items
          items:
            $ref: '#/components/schemas/MainNavItem'
          example:
            - Header
            - entity: posts
              icon: 'fas fa-newspaper'
            - route: /entity/posts/item/1
              title: Edit item \#1
            - path: 'https://facebook.com'
              title: External link
            - title: Link group
              items:
                - entity: users
                  icon: 'fas fa-user'
        entities:
          type: object
          description: entities meta data
          additionalProperties:
            $ref: '#/components/schemas/EntityDescription'
        wysiwyg:
          type: object
          description: WYSIWYG editor default configuration
          properties:
            css:
              type: string
              description: inline CSS or CSS file link for WYSIWYG editor
        image_path:
          type: string
          description: images base path (prepended to any image field values like `<img src="{prefix}{field value}">`)
      additionalProperties: true
      required: [nav, entities]
    EntityItem:
      type: object
      description: Entity item
      additionalProperties:
        description: Entity item fields
      example:
        id: 2
        name: Post name
        content: <p>Post content</p>
    PaginationData:
      type: object
      description: Pagination data
      properties:
        current_page:
          type: integer
        last_page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
      required: [current_page, last_page, per_page, total]
      example:
        current_page: 10
        last_page: 18
        per_page: 25
        total: 462
    FileList:
      type: array
      description: File paths list
      items:
        type: string
      example:
        - '/storage/upload/1234.pdf'
        - '/storage/upload/4321.docx'
        - '/storage/upload/qwerty.txt'
    ImageList:
      type: array
      description: Image names list
      items:
        type: string
      example:
        - '604nHV1512539451.jpg'
        - '9AMisR1512202192.png'
        - 'G2ZNdd1512202192.svg'

tags:
  - name: user
  - name: meta
  - name: entity
  - name: upload
paths:
  /auth:
    post:
      description: Authenticate
      tags: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: authenticate by email and password
                  properties:
                    email:
                      type: string
                      format: email
                      description: user email
                    password:
                      type: string
                      description: user password
                    remember:
                      type: boolean
                      default: false
                  required: [email, password]
                - type: object
                  description: authenticate by remember token
                  properties:
                    remember_token:
                      type: string
                      description: remember token
                  required: [remember_token]
            examples:
              email_password:
                summary: email and password
                value:
                  email: example@mail.com
                  password: secret
                  remember: true
              remember_token:
                summary: remember token
                value:
                  remember_token: "0YUkQAflcEtSp522SiIG4V8txBE8Cl1MlO1svgOtpsLKOIalK8VVqn9jymAD7iPYK9fQ0onBi2fdFMikbaKfGEk1y6pXtasc97ZC"
      responses:
        200:
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  api_token:
                    type: string
                    description: bearer token
                  remember_token:
                    type: string
                    description: remember token
        400:
          description: Bad credentials
        429:
          $ref: '#/components/responses/429'
    delete:
      description: Logout
      tags: [user]
      security:
        - bearer: []
      responses:
        200:
          description: Successful logout
        401:
          $ref: '#/components/responses/401'
  /auth/user:
    get:
      description: Get authorized user
      tags: [user]
      security:
        - bearer: []
      responses:
        200:
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401'
  /locale:
    get:
      description: Get locale preferences
      tags: [meta]
      responses:
        200:
          description: Locale preferences
          content:
            application/json:
              schema:
                type: object
                properties:
                  locale:
                    type: string
                    description: primary locale
                  fallback_locale:
                    type: string
                    description: fallback locale
                example:
                  locale: ru
                  fallback_locale: en
  /meta:
    get:
      description: Get meta information (navigation, entity descriptions, allowed actions, etc.)
      tags: [meta, entity]
      security:
        - bearer: []
      responses:
        200:
          description: Meta information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaData'
        401:
          $ref: '#/components/responses/401'
  /entity/{entity}:
    parameters:
      - $ref: '#/components/parameters/entity'
    get:
      description: Get entity index
      tags: [entity]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/scopes'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity item listing
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/EntityItem'
                  pagination:
                    $ref: '#/components/schemas/PaginationData'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
    post:
      description: Create new entity item
      tags: [entity]
      requestBody:
        $ref: '#/components/requestBodies/entityItemData'
      responses:
        200:
          description: Entity item successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityItem'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        413:
          $ref: '#/components/responses/413'
        422:
          $ref: '#/components/responses/422'
    delete:
      description: Delete multiple entity items
      tags: [entity]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                keys:
                  type: array
                  description: list of item keys (IDs)
                  items:
                    description: item key
              example:
                keys: [1, 2, 3]
      responses:
        200:
          description: Entity items successfully deleted
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
  /entity/{entity}/{id}:
    parameters:
      - $ref: '#/components/parameters/entity'
      - $ref: '#/components/parameters/id'
    get:
      description: Get entity item
      tags: [entity]
      responses:
        200:
          description: Entity item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityItem'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
    post:
      description: Update entity item
      tags: [entity]
      requestBody:
        $ref: '#/components/requestBodies/entityItemData'
      responses:
        200:
          description: Updated entity item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityItem'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        413:
          $ref: '#/components/responses/413'
        422:
          $ref: '#/components/responses/422'
    delete:
      description: Delete entity item
      tags: [entity]
      responses:
        200:
          description: Entity item successfully deleted
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        403:
          $ref: '#/components/responses/403'
  /entity/{entity}/{id}/fast:
    parameters:
      - $ref: '#/components/parameters/entity'
      - $ref: '#/components/parameters/id'
    post:
      description: |
        Entity item live update.
        Works similar to POST /entity/{entity}/{id} but validation is executed only against a single field.
      tags: [entity]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                __field:
                  type: string
                  description: field name to update
                additionalProperties:
                  description: field => value
              example:
                  __field: sort
                  sort: 100
          multipart/form-data:
            schema:
              type: object
              properties:
                __field:
                  type: string
                  description: field name to update
                additionalProperties:
                  description: file__field => binary data
                  type: string
                  format: binary
              example:
                __field: photo
                file__photo: '<binary file data>'
      responses:
        200:
          description: Updated entity item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityItem'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        413:
          $ref: '#/components/responses/413'
        422:
          $ref: '#/components/responses/422'
  /upload/files:
    post:
      description: Upload files
      tags: [upload]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                'files[]':
                  description: files to upload
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: files successdully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        413:
          $ref: '#/components/responses/413'
  /upload/images:
    post:
      description: Upload images
      tags: [upload]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                'images[]':
                  description: images to upload
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: images successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        413:
          $ref: '#/components/responses/413'